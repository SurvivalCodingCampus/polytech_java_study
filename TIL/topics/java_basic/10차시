- `import com.survivalcoding.경로`
- Set : 순서가 없이 검색해서 찾는 것
    - list에 비해 속도가 빠르다
    - Set은 중복이 안되지만, 같은 객체일 때만 해당됨
    - 따라서 퀴즈 정답은 모두 1, 1
    - hashCode를 재정의해야 Set, List 등에도 적용됨
- Set, Map과 list 비교
    - Set, Map 계열은 요소를 검색할 때 equals() 보다 비용이 싼 hashCode() 비교를 사용함
        - equals는 하나하나 다 보는 것, hashCode는 주민번호(대표번호)를 확인
    - List 는 순차 검색이라 느림
    1. 모든 객체는 해시값을 가진다
    2. 동일한 객체는 항상 같은 해시값을 가진다.
    3. 하지만, 같은 해시값이라고 항상 동일한 객체는 아니다
        - **Set(특히 HashSet)과 Map**은 **먼저 `hashCode()`를 비교하고**, **같은 해시값이 나올 경우에만 `equals()`를 추가로 사용**
- list 등의 클래스를 정렬할 때 Comparator 인터페이스를 사용하여 정렬 규칙을 설계할 수 있음

    ```jsx
    //즉석 정의
    Collections.sort(numbers, new Comparator<Integer>(){
    	@Override
    	public int compare(Integer o1, Integer o2){
    		return o2 -o1; // 내림차순
    	}
    }
    ```

    - return o2 -o1 / return o1 - o2 오름차순 내림차순 바꿀 수 있음

    | 구분 | 방식 | 설명 |
    | --- | --- | --- |
    | **정석 방식** | `Comparable` 인터페이스를 클래스에 구현 | 클래스 내부에 `compareTo()`를 작성해서 "이 객체는 이런 기준으로 정렬돼요"라고 **사전에** 알려주는 것 |
    | **즉석 방식** | `Comparator`를 **정렬할 때 그 자리에서 정의** | "정렬이 지금 필요하니까, 지금 기준을 줄게요"라고 **그때그때** 비교 기준을 만드는 방식 |
- 얕은 복사 깊은 복사
    - 대부분의 경우 얕은 복사로도 문제가 없어서 default인거임
    - 깊은 복사는 implements Cloneable / clone() 구현해야함
- Date 비교 메서드
    - `before(Date date)`: 현재 `Date` 객체가 인자로 전달된 `date`보다 이전인지 확인합니다. 이전이면 `true`, 아니면 `false`를 반환합니다.
    - `after(Date date)`: 현재 `Date` 객체가 인자로 전달된 `date`보다 이후인지 확인합니다. 이후이면 `true`, 아니면 `false`를 반환합니다.
    - `equals(Object date)`: 현재 `Date` 객체가 인자로 전달된 `date`와 같은지 확인합니다. 같으면 `true`, 아니면 `false`를 반환합니다.