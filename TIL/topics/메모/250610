오브젝트(object): 현실세계의 모든 객체
클래스(class): 오브젝트를 가상세계용으로 구체화 한 것(붕어빵 틀)
인스턴스(instance): 클래스틀 활용해 메모리 상에 만들어 낸 것 (붕어빵)

클래스명-명사-단어의 맨 처음은 대문자(pascal)-Hero, MonstreInfo
필드명-명사-최초 이외의 단어의 맨 처음은 대문자(camel)-level, itemList
메소드명-동사-최초 이외의 단어의 맨 처음은 대문자(camel)-attack,findWeakPoint

클래스 정의에 따른 효과
1. 정의한 클래스로 인스턴슬르 생성할 수 있다
2. 이 클래스로 생성한 인스턴스를 넣을 수 있는 새로운 변수의 다입이 이용가능해진다
Hero 클래스를 정의하면 Hero 타입의 변수가 이용 가능
클래슬르 정의하면 Java에서 이용가능한 타입의 종류가 점점 늘어남

인스턴스와 클래스
- 인스턴스와 클래스는 완전히 다른 것
- 가상세계에서 활동하는 것은 인스턴스(오브젝트)
- 인스턴스를 생성하기 위한 틀이 클래스

필드와 메소드
- 클래스에는 속성을 필드로, 동작을 메소드로 선언
- final이 붙은 필드는 상수 필드로 값이 불변
- this는 자기 자신의 인스턴스를 표시하는 키워드

클래스 타입
-클래스를 정의하면, 그 클래스 타입의 변수를 선언 할 수 있다
- 어떤 클래스 타입 변수는 그 클래스의 인스턴스를 담을 수 있다

인스턴스화
- new 키워드를 사용하여 클래스로부터 인스턴스를 생성
- 어떤 클래스 타입 변수에 인스턴스가 담겨 있을 때 "변수명.필드명"이나 "변수명.메소드명()" 으로 그 인스턴스의 필드나 메소드를 이용할 수 있다


테스트 코드 작성 방법
1. 테스트 할 파일을 고른다
2. Test 디렉토리 아래에 동일 위치에 클래스 이름 뒤에 test를 붙인 파일을 작성한다
given>when>then
expect() 함수를 활용한 결과 검증

